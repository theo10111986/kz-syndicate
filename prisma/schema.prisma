// prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  // ΑΥΤΟ είναι το σημαντικό για Vercel (linux-musl)
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // --- profile fields ---
  password     String? @db.VarChar(255)
  firstName    String?
  lastName     String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  postalCode   String?
  country      String?
  phone        String?

  // relations
  accounts      Account[]
  sessions      Session[]
  savedDesigns  SavedDesign[]
  priceRequests PriceRequest[]
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@index([expires])
}

model SavedDesign {
  id        String   @id @default(cuid())
  userId    String
  name      String
  imageUrl  String   @db.LongText // χωράει data URLs (base64)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PriceRequest {
  id          String   @id @default(cuid())
  userId      String
  description String
  imageUrl    String?  @db.LongText // χωράει data URLs
  emailSent   Boolean  @default(false) // status αποστολής email
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  items     Json
  total     Decimal  @db.Decimal(10, 2)
  currency  String   @default("EUR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

/**
 * ----------------------- ΝΕΑ ΜΟΝΤΕΛΑ -----------------------
 */

model Product {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  priceCents  Int
  description String?  @db.Text
  imageUrl    String   @db.Text
  category    String?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdAt])
}

model GalleryItem {
  id        String   @id @default(cuid())
  title     String
  imageUrl  String   @db.Text
  tags      Json? // MySQL: μην βάζεις @default σε JSON
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
}

